---
title: "rmarkdown_strings"
author: "Ronald Mego"
date: "12/2/2021"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r}
#install.packages("stringr")
library(stringr)
library(tidyverse)
```
#comilla dobre dentro de otra comilla doble y caracteres escapantes
```{r}
double_quote <- "\"" # '"'
single_quote <- '\'' # "'"
backslash <- "\\"
```

#visualizandolos
```{r}
x <- c(single_quote,double_quote,backslash)
```

```{r}
writeLines(x)
```
#otros caracteres escapantes
#\n -> intro, salto de linea
#\t -> tabulador

#letras griegas
```{r}
mu <- "\u00b5"
```

descrubrir otros caracteres
```{r}
?'"'
```


#mide la longitud
```{r}
str_length(c("x","Ronald Mego mola como prof",NA))
```
#combina
```{r}
str_c("a","b","c",sep=", ")
```
#cuidado con los NA
```{r}
x <- c("abc",NA)
str_c("hola",str_replace_na(x),"adios", sep=" ")
```

#notar que combina con vectores internos obteniendo toda la combinacion
```{r}
str_c("prefix-",c("a","b","c"),"-sufix")
```

```{r}
name <- "Ronald"
momento_del_dia <- "mañana"
birthday <- T
```

```{r}
str_c(
  "Buena ", momento_del_dia, " ", name,
  if(birthday) " y FELIZ CUMPLEAñOS!! =D",
  "."
)
```

#notar la diferecia de usar colapse y separador

#esto es un string
```{r}
str_c(c("a","b","c"), collapse = ",")
```
#estos son vectores
```{r}
str_c(c("a","b","c"), sep = ",")
```
```{r}
x <- c("Manzanas", "Peras","Limones","Platanos")
```

#captura los tres primeros caracteres
```{r}
str_sub(x,1,3)
```
#capturas los tres ultimos caracteres
```{r}
str_sub(x,-3-1)
```
#si quiero cambiar a minusculas
```{r}
str_to_lower(x)
```
```{r}
str_to_upper(x)
```
#convierte a mayuscula la tercera letra de string
```{r}
(
str_sub(x,3,3) <- str_to_upper(str_sub(x,3,3))
)
x
```
#pone la primera en mayuscula
```{r}
str_to_title(x)
```

#cuidado con el idioma, es mejor setear el locale
```{r}
str_sort(x) #sistema operativo
str_sort(x,locale = "es") #en español
```

#### EXPRESIONES REGULARES
```{r}
#str_view()
#str_view_all()
x <- c("manzana","banana","pera","pomelo")
```

#busca en donde aparecen estos caracteres
```{r}
str_view(x,"an")
```

#busca los que tengan "a" con "algo" antes y despues de la "a"
```{r}
str_view(x,".a.")
```

#para buscar puntos se necesitan dos backslash donde la primera indica que es un caracter escapante y de lo que queda para que nuevamente sea caracter escapante en la busqueda
```{r}
dot<-"\\."
writeLines(dot)
```
```{r}
str_view(c("abc","a.c","bc."),"a\\.c")
```
#para localizar un backslash se necesitan cuatro barras, la primera indica que estamos frente a un caracter escapante y la tercera nuevamente indica un caracter escapante, por eso solo se ven dos barras cuando se pone writeLines
```{r}
backslash <- "\\\\"
writeLines(backslash)
```
```{r}
writeLines("a\\c")
```


```{r}
str_view("a\\c","\\\\")
```

#Anclas
#^ -> inicio del string
#$ -> final del string
```{r}
x <- c("manzana","banana","pera","pomelo")
```


dame todo lo que inicie con "p"
```{r}
str_view(x,"^p")
```

dame todo lo que termine en "a"
```{r}
str_view(x,"a$")
```


```{r}
y <-  c("tarta de manzana","manzana","manzana al horno","pastel de manzana")
```

si tienes un vector con la palabra "manzana" entre varias otras palabras y requieres ubicar unicamente la palabra manzana se busca asi
```{r}
str_view(y,"^manzana$")
```

#\b -> localiza el separador "espacio"
#\d -> localiza cualquier digito
#\s -> cualquier espacio en blanco (espacio, tabulador, salto de linea)
[abc] -> localiza la "a", la "b", o la "c" indistintamente
[^abc] -> localiza cualquier cosa excepto la "a", "b", "c"
#abc|d..m , abc|xyz -> localiza una u otra forma del texto ejem:

ubica la palabra ceviche tanto si se escribe "cebiche" como "ceviche"
```{r}
str_view(c("ceviche","cebiche"),"ce(v|b)iche")
```

#? -> 0 o 1
#+ -> 1 o + veces
#* -> 0 o más veces
```{r}
x <- "El año 1888 es el más largo en números romanos: MDCCCLXXXVIII"
```

#buscando patrones de repeticion

#busca una c y luego otra C opcional
```{r}
str_view(x,"CC?")
```

#busca una C y luego C y sus repeticiones
```{r}
str_view(x,"CC+")
```

busca una C y luego una L y luego X cuantas repeticiones tenga
los corchetes indica que busca repeticiones ya sea en la "L" o la "X"
```{r}
str_view(x,"C[LX]+")
```

#ejemplo, la palabra color se escribe "color" o "colour" se requiere encontrarla en ambas versiones
```{r}
str_view(c("color","colour"),"colou?r")
```

#ejemplo de busqueda de banana
#cuando se usan parentesis, busca la repeticion de lo que esta dentro
```{r}
str_view(c("banana"),"ba(na)+")
```

#{n} -> exactamente n repeticiones
#{n,} -> n o más repeticiones
#{,m} -> como máximo m repeticiones
#{n,m} -> entre n y m repeticiones

ejem: busca exactamente 2 repeticiones de C
```{r}
str_view(x,"C{2}")
```

busca 2 o mas repeticiones de "C"
```{r}
str_view(x,"C{2,}")
```

busca entre 2 y 3 repeticiones de "C"
```{r}
str_view(x,"C{2,3}")
```

Lo anterior busca expresiones que cumplan con desde dos hasta tres repeticiones, pero devuelve el mas grande, si queremos que devuelva el mas pequeño se usa un ? de comodin
```{r}
str_view(x,"C{2,3}?")
```

buscar una C, el grupo LX una o mas veces pero devolver el menor
```{r}
str_view(x,"C[LX]+?")
```

```{r}
fruits <- c("banana","coco","papaya","manzana","pera","pepino")
```


buscar nombres de frutas con patrones de repeticion
(..) significa dos cosas cualequiera
\\ indica que se repite una vez el primer elemento de la expresion regular
```{r}
str_view(fruits,"(..)\\1")
```
si quiero que me encuentre la repeticion del primer elemento de la expreion regular
```{r}
str_view("abc-abc","(...)-\\1")
```

#busca que se reptia el primer y segundo elemento de la expresion regular
```{r}
str_view("abc-abc-","(...)(-)\\1\\2")

```

otras alternativas a las regexp

busca en el vector fruits si contiene una expresion
```{r}
str_detect(fruits,"a")
```
```{r}
str_view(fruits,"^[^bc]+$")
```


exploremos la base words del paquete R que contiene palabras en ingles
que cumplan ciertas condiciones

#cuantas palabras empiezan con j 
```{r}
sum(str_detect(words,"^j"))
```
#que porcentaje empiezan con vocal
```{r}
mean(str_detect(words,"^[aeiou]"))
```
#que porcentaje terminan en vocal
```{r}
mean(str_detect(words,"[aeiou]$"))
```
#cuantas palabras no tienen ninguna vocal
```{r}
sum(!str_detect(words,"[aeiou]"))
```

