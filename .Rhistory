avg_MARGEN=mean(MARGEN,na.rm=TRUE),
avg_REVENUE=mean(REVENUE_TOTAL,na.rm=TRUE),
avg_trx=mean(TRX_TOTALES,na.rm=TRUE),
avg_costo=mean(COSTO,na.rm=TRUE),
avg_monto=mean(MONTO_TOTAL,na.rm=TRUE)
) %>%
openxlsx::write.xlsx("Data/cuadro_honduras_3.xlsx")
mtcars %$%
cor(disp,mpg)
library(tidyverse)
rnorm(1000) %>%
matrix(ncol=2) %T>% #entrega dos salidas
plot() %>% #primera salida
str() #segunda salida
mtcars %$%
cor(disp,mpg)
library(tidyverse)
mtcars %$%
cor(disp,mpg)
mtcars %$%
cor(disp,mpg)
library(tidyverse)
mtcars %$%
cor(disp,mpg)
norm_r(5)
norm_r()
has_name <- function(x){
nms <- names(x)
if(is.null(nms)){
#no tiene nombre asignado
rep(FALSE, length(x))
} else {
#ausencia de NAs y de ""
!is.na(nms) & nms !=""
}
}
has_name(c(1,2,3))
has_name(mtcars)
has_name(c(1,2,3))
has_name(mtcars)
has_name(tribble(
~x, ~y, ~` `,
1 ,  2,   3
))
library(tidyverse)
has_name(tribble(
~x, ~y, ~` `,
1 ,  2,   3
))
if(any(c(T,F))){
"tenemos almenos un verdadero"
} else
"no hay ningun verdadero"
if(all(c(T,F))){
"tenemos todas las condiciones verdaderas"
} else{
"tenemos alguna condicion falsa"
}
calculate <- function(x,y,op) {
switch (op,
suma = x+y,
resta = x-y,
multiplicacion = x*y,
division = x/y,
stop("error")
)
}
calculate(2,3,"suma")
wt_mean <- function(x,w){
if(length(x) != length (w)){
stop("'x' y 'w' no tienen la misma longitud")
}
sum(x*w)/sum(w)
}
wt_mean(1:6,1:3)
wt_mean <- function(x,w,na.rm=TRUE){
stopifnot(is.logical(na.rm),
length(na.rm)==1,
length(x)==length(w)
)
if(na.rm){
missing <- is.na(x) | is.na(w)
x <- x[!missing]
w <- w[!missing]
}
sum(x*w)/sum(w)
}
wt_mean(1:6,1:3)
wt_mean(1:6,1:6)
library(tidyverse)
rule <- function(...,pad="#"){
title1 <- paste0(...)
width <- get0ption("width") - nchar -5
cat(stringr::str_dup(pad,width/2)," ",title1," ", str_dup(pad,width/2))
}
rule("hola")
rule <- function(...,pad="#"){
title1 <- paste0(...)
width <- getOption("width") - nchar -5
cat(stringr::str_dup(pad,width/2)," ",title1," ", str_dup(pad,width/2))
}
rule("hola")
rule <- function(...,pad="#"){
title1 <- paste0(...)
width <- getOption("width") - nchar(title1) -5
cat(stringr::str_dup(pad,width/2)," ",title1," ", str_dup(pad,width/2))
}
rule("hola")
rule("VIDEO VARIABLES DE RETORNO")
my_function <- function(x,y,z){
if(length(x)==0||length(y)==0){
return(0)
}
#el codigo sigue mas adelante con otras funciones
}
my_function(,,2)
my_function(1,2,2)
my_function(1,2,2)
show_nas <- function(df){
n <- sum(if.na(df))
cat("Número de NAs: ",n, "\n", sep="")
invisible(df)
}
x <- show_nas(mtcars)
show_nas <- function(df){
n <- sum(if.na(df))
cat("Número de NAs: ",n, "\n", sep="")
invisible(df)
}
show_nas <- function(df){
n <- sum(is.na(df))
cat("Número de NAs: ",n, "\n", sep="")
invisible(df)
}
x <- show_nas(mtcars)
class(x)
dim(x)
show_nas <- function(df){
n <- sum(is.na(df))
cat("Número de NAs: ",n, "\n", sep="")
#invisible(df)
}
x <- show_nas(mtcars)
class(x)
dim(x)
x <- show_nas(mtcars)
x <- show_nas(mtcars)
class(x)
show_nas <- function(df){
n <- sum(is.na(df))
cat("Número de NAs: ",n, "\n", sep="")
invisible(df)
}
x <- show_nas(mtcars)
class(x)
dim(x)
mtcars %>%
show_nas() %>%
mutate(mpg = ifelse(mpg>20,NA,mpg)) %>%
show_nas()
switch(x,
a = ,
b = "ab",
c = ,
d = "cd"
)
x <- a
x <- "a"
switch(x,
a = ,
b = "ab",
c = ,
d = "cd"
)
x <- "b"
switch(x,
a = ,
b = "ab",
c = ,
d = "cd"
)
x <- "c"
switch(x,
a = ,
b = "ab",
c = ,
d = "cd"
)
x <- "d"
switch(x,
a = ,
b = "ab",
c = ,
d = "cd"
)
x <- "e"
switch(x,
a = ,
b = "ab",
c = ,
d = "cd"
)
x <- "e"
switch(x,
a = ,
b = "ab",
c = ,
d = "cd"
)
commas(letters, collapse = "-")
library(stringr)
commas(letters, collapse = "-")
mean(c(1,2,3,4))
mean(c(1,2,3,4)) $>$ trim()
mean(c(1,2,3,4)) %>% trim()
mean(c(1,2,3,4)) %>% trim(.)
mean(c(1,2,3,4),trim = 0.5)
mean(c(1,2,3,4,10),trim = 0.5)
mean(c(1,2,3,4,100),trim = 0.5)
rule("VIDEO DE VECTORES")
typeof(letters)
typeof(1:30)
length(letters)
typeof(x)
x <- list("a","b",1:10)
typeof(x)
1:10 %%3 ==0
dplyr::near(x,2)
x <- sqrt(2)^2
x-2
dplyr::near(x,2)
x <- sqrt(2)^2
x-2
dplyr::near(x,2)
x==2
as.character(c(1,2,3))
y <- x>10
sum(y)
x <- sample(20,size=100,replace=TRUE)
y <- x>10
sum(y) #cuantos elemtnos >10 hay en el array?
mean(y) #que proporcion de elemntos son >10?
c(x=4, y =3, z= -1)
set_names(1:3,c("x","y","z"))
rule("sub conjunto de vectores")
x <- letters
x
x[c(3,2,6)]
x[c(1,1,7,7,7,3,3,3)]
x[c(-3,-5,-7)]
x[c(6:15)]
x[-c(6:15)]
x[c(4,-3)]
x <- c(4,5,8,NA,2,1,3,NA)
x[!is.na(x)]
x[x%%2==0]
x <- matrx(1:9,byrow=T,ncol=3)
x <- matrx(1:9,byrow=T,ncol=3)
x <- matrix(1:9,byrow=T,ncol=3)
x
x[,1]
x[1,]
x[,1]
x[-2]
x[-2,]
x[,-1]
#filtrando una matrix
```{r}
x <- matrix(1:9,byrow=T,ncol=3)
x
```
x <-c(4,5,8,NA,2,1,3,NA)
x <- c(abc=1,def=2.ghi=3)
x <- c(abc=1,def=2.ghi=3)
x <- c(abc=1,def=2,ghi=3)
x[c("def","abc","abc")]
x["abc"]
x[["abc"]]
library(tidyverse)
library(survival)
library(survival)
library(ranger)
library(ggplot2)
library(dplyr)
library(ggfortify)
data(veteran)
head(veteran)
##   trt celltype time status karno diagtime age prior
## 1   1 squamous   72      1    60        7  69     0
## 2   1 squamous  411      1    70        5  64    10
## 3   1 squamous  228      1    60        3  38     0
## 4   1 squamous  126      1    60        9  63    10
## 5   1 squamous  118      1    70       11  65    10
## 6   1 squamous   10      1    20        5  49     0
data('veteran')
head(veteran)
##   trt celltype time status karno diagtime age prior
## 1   1 squamous   72      1    60        7  69     0
## 2   1 squamous  411      1    70        5  64    10
## 3   1 squamous  228      1    60        3  38     0
## 4   1 squamous  126      1    60        9  63    10
## 5   1 squamous  118      1    70       11  65    10
## 6   1 squamous   10      1    20        5  49     0
data(veteran)
veteran
head(km)
km <- with(veteran,Surv(time,status))
head(km)
km <- with(veteran,Surv(time,status))
head(km,80)
km_fit <- survfit(Surv(time,status)~1, data=veteran)
summary(km_fit,times=c(1,30,60,90*(1:10)))
autoplot(km_fit)
library(survival)
library(survminer)
install.packages("survminer")
library(survival)
library(survminer)
library(lubridate)
date_ex <- tibble(
sx_date = c("2007-06-22","2004-02-13","2010-10-27"),
last_fup_date=c("2017-04-15","2018-07-04","2016-10-31")
)
date_ex <- tibble(
sx_date = c("2007-06-22","2004-02-13","2010-10-27"),
last_fup_date=c("2017-04-15","2018-07-04","2016-10-31")
)
date_ex
date_ex
date_ex %>%
mutate(
sx_date = as.Date(sx_date, format = "%Y-%m-%d"),
last_fup_date = as.Date(last_fup_date, format = "%Y-%m-%d")
)
date_ex <- tibble(
sx_date = c("2007-06-22","2004-02-13","2010-10-27"),
last_fup_date=c("2017-04-15","2018-07-04","2016-10-31")
)
date_ex
date_ex %>%
mutate(
sx_date = ymd(sx_date),
last_fup_date = ymd(last_fup_date)
)
date_ex %>%
mutate(
os_yrs =
as.duration(sx_date %--% last_fup_date) / dyears(1)
)
View(date_ex)
date_ex %>%
mutate(
sx_date = ymd(sx_date),
last_fup_date = ymd(last_fup_date)
) %>%
mutate(
os_yrs =
as.duration(sx_date %--% last_fup_date) / dyears(1)
)
(
date_ex %>%
mutate(
os_yrs =
as.duration(sx_date %--% last_fup_date) / dyears(1)
)
)
dyears(1)
(
date_ex %>%
mutate(
os_yrs =
as.duration(sx_date %--% last_fup_date) / dyears(1)
)
)
date_ex <- date_ex %>%
mutate(
sx_date = ymd(sx_date),
last_fup_date = ymd(last_fup_date)
)
View(date_ex)
(
date_ex %>%
mutate(
os_yrs =
as.duration(sx_date %--% last_fup_date) / dyears(1)
)
)
lung
data(lung)
head(lung)
head(lung)
bladder
head(bladder)
head(bladder)
head(bladder)
bladder
install.packages("survminer")
library(tidyverse)
rule <- function(...,pad="#"){
title1 <- paste0(...)
width <- getOption("width") - nchar(title1) -5
cat(stringr::str_dup(pad,width/2)," ",title1," ", str_dup(pad,width/2))
}
rule <- function(...,pad="#"){
title1 <- paste0(...)
width <- getOption("width") - nchar(title1) -5
cat(stringr::str_dup(pad,width/2)," ",title1," ", str_dup(pad,width/2))
}
library(tidyverse)
rule <- function(...,pad="#"){
title1 <- paste0(...)
width <- getOption("width") - nchar(title1) -5
cat(stringr::str_dup(pad,width/2)," ",title1," ", str_dup(pad,width/2))
}
rule("VIDEO LISTAS")
rule("VIDEO LISTAS")
x <- list(
a=1:3,
b="soy un string",
c=pi,
d-list(-2,-5)
)
x <- list(
a=1:3,
b="soy un string",
c=pi,
d=list(-2,-5)
)
x
str(x)
x <- list(
a=1:3,
b="soy un string",
c=pi,
d=list(-2,-5)
)
x
x[c("a","c")]
x[1:2]
str(x[1:2])
x[4]
str(x[4])
x[c("a","c")]
x[[1]]
str(x[[1]])
x[[1]][[1]]
x[[4]]
x[[4]][[1]]
str(x[[4]][[1]])
attr(x,"desc")
attr(x,"desc") <- "Vector de las horas del dia"
attr(x,"created") <- "Ronald Mego"
attr(,."source") <- "Curso Tidyverse"
attr(x,"desc")
attr(x,"desc") <- "Vector de las horas del dia"
attr(x,"created") <- "Ronald Mego"
attr(x,"source") <- "Curso Tidyverse"
attributes(x)
x <- factor(c("L","M","J","V","S","D"))
x <- factor(c("L","M","J","V","S","D"),
levels = c("L","M","X","J","V","S","D")
)
x
attributes(x)
typeof(x)
x <- as.Date("1988-05-19")
x <- as.Date("1988-05-19")
typeof(x)
attributes(x)
unclass(x)
x <- lubridate::ymd_hm()
x <- lubridate::ymd_hm("1988-05-19 16:30")
typeof(x)
attributes(x)
unclass(x)
attr(x,"tzone") <- "US/Pacific"
x
typeof(tb)
tb <- tibble(x=1:5,y=6:10)
typeof(tb)
attributes(tb)
hms::hms(3600)
hms(3600)
hms::hms(3600)
rule("VIDEO BUCLE")
t <- tibble(
a=rnorm(100),
b=rnorm(100),
c=rnorm(100),
d=rnorm(100)
)
t %>% View()
mediam(t$a)
t <- tibble(
a=rnorm(100),
b=rnorm(100),
c=rnorm(100),
d=rnorm(100),
e=rnorm(100)
)
mediam(t$a)
median(t$a)
median(t$b)
median(t$c)
median(t$d)
median(t$e)
output
output <- vector("double",ncol(t))
for(i in seq_along(t)){
output[[i]] <- median(t[[i]])
}
output
