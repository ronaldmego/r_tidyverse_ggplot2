knitr::opts_chunk$set(echo = TRUE)
nycflights13::flights
?fligts
?fligts
?fligts
?fligths
?fligths
flitghts
?flights
?flights
nycflights13::flights
?flights
nycflights13::flights
View(flights)
View(flights)
?flights
View(flights)
View(nycflights13::flights)
data("nycflights13::flights")
data("flights")
View("nycflights13::flights")
View("nycflights13::flights")
View("nycflights13::flights")
View("flights")
nycflights13::flights
View("flights")
library(tidyverse)
library(nycflights13)
?flights
flights<- nycflights13::flights
View("flights")
?flights
flights<- nycflights13::flights
View(flights)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(nycflights13)
arrange(flights,carrier)
sorted_date <- arrange(flights , year,month,day)
tail(sorted_date)
sorted_date <- arrange(flights , year,month,day)
sorted_date[1,]
View(sorted_date)
sorted_date[1024:1068,]
select ( sorted_date [1024:1068] , dep_delay, arr_delay)
select ( sorted_date [1024:1068,] , dep_delay, arr_delay)
select(flights, year, month, day)
select(flights, dep_delay:arr_delay)
select ( flights , -(year:day))
select ( flights , starts_with("dep"))
select ( flights , ends_with("delay"))
select ( flights , contains ("st"))
#buscar caracteres repetidos
select( flights , matches ("(.)\\1"))
select ( flights , num_range("x",1:5))
select (flights , time_hour , distance, air_time, everything())
#¿Qué variables del dataset contienen valores desconocidos? ¿Qué representan esas filas donde faltan los datos?
colnames(flights)[colSums(is.na(flights)) > 0]
arrange(flights, dep_delay, is.na())
arrange(flights,is.na(dep_delay))
filter(flights,is.na(dep_delay))
arrange(flights,desc(dep_delay))
tail(arrange(flights,desc(dep_delay)))
arrange(flights,desc(dep_delay))
arrange(filter(flights,!is.na(dep_delay),desc(dep_delay)))
arrange(filter(flights,!is.na(dep_delay)),desc(dep_delay))
tail(arrange(filter(flights,!is.na(dep_delay)),desc(dep_delay)))
arrange(filter(flights,!is.na(dep_delay)),desc(dep_delay))
arrange(flights,is.na(dep_delay))
arrange(flights,desc(is.na(dep_delay))
arrange(flights,desc(is.na(dep_delay)))
arrange( flights , desc(dep_time))
arrange( flights , desc(dep_delay))
arrange(flights, desc (air_time/distance) )
arrange(flights , desc(air_time))
arrange(flights , (air_time))
select(flights, contains("e"))
select(flights, contains("de"))
select(flights, contains("delay"))
select(flights, contains("delay")|contains("time"))
select(flights, contains("delay")|contains("_time"))
select(flights, dep_delay:arr_time)
flights
flights
select(flights, dep_delay:arr_delay)
flights
select(flights, dep_delay:arr_delay)
flights
flights
select(flights, dep_time:arr_delay)
flights
select(flights, dep_time:arr_delay & -(sched_dep_time,sched_arr_time))
flights
select(flights, dep_time:arr_delay)
select(select(flights, dep_time:arr_delay),-(sched_dep_time,sched_arr_time))
flights
select(flights, dep_time:arr_delay & -(sched_dep_time))
flights
select(flights, dep_time:arr_delay & -sched_dep_time)
flights
select(flights, dep_time:arr_delay & -sched_dep_time & -sched_arr_time)
select(flights , dep_delay)
select(flights , dep_delay , dep_delay)
select(flights , dep_delay , arr_delay)
select(flights , dep_delay , dep_delay,dep_delay)
one_of(c("year", "month", "day", "dep_delay", "arr_delay"),flights)
select(flights,one_of(c("year", "month", "day", "dep_delay", "arr_delay"))
select(one_of(c("year", "month", "day", "dep_delay", "arr_delay"))
select(flights,-one_of(c("year", "month", "day", "dep_delay", "arr_delay")))
select(flights,one_of(c("year", "month", "day", "dep_delay", "arr_delay")))
select(flights,-one_of(c("year", "month", "day", "dep_delay", "arr_delay")))
select(flights, contains("time"))
arrange(flights,!is.na(dep_time))
arrange(flights,!is.na(dep_time))
arrange(flights,desc(is.na(dep_delay))) #otra forma
arrange(flights, desc (distance/air_time) )
flights_new <- select ( flights , year:day,end_with("delay"),distance,air_time)
flights_new <- select ( flights , year:day,ends_with("delay"),distance,air_time)
View(flights_new)
mutate(flights_new ,
time_gain = arr_delay - dep_delay,
air_time_hour= air_time/60,
flight_speed = distance/air_time_hour,
time_gain_per_hour = time_gain / air_time_hour)
transmutate(flights_new ,
time_gain = arr_delay - dep_delay,
air_time_hour= air_time/60,
flight_speed = distance/air_time_hour,
time_gain_per_hour = time_gain / air_time_hour
) -> data_from_flights
transmute(flights_new ,
time_gain = arr_delay - dep_delay,
air_time_hour= air_time/60,
flight_speed = distance/air_time_hour,
time_gain_per_hour = time_gain / air_time_hour
) -> data_from_flights
View(data_from_flights)
transmute(flights,
air_time,
hour_air = air_time%/% 60,
minute_air= air_time %%60
)
3*60+47
df <- 1:12
df
lag(df)
df <- 1:12
df
lag(df)
lead(df)
df
cumsuf(df)
df
cumsum(df)
df
cumsum(df)
cumprod(df)
cummin(df)
cummax(df)
cummean(df)
transmute(flights,
dep_delay,
has_been_delayed=(dep_delay>0)
)
df <- c(1,2,3,3,3,NA,3,4)
df <- c(7,1,2,5,3,3,NA,3,4,-2)
df
min_rank(df)
df <- c(7,1,2,5,3,3,NA,3,4,-2)
df
min_rank(df) #de menor a mayor
min_rank(desc(df)) #de mayor a menor
max_rank(df)
row_number(df)
df
row_number(df)
df
dense_rank(df)
df
percent_rank(df)
df
cume_dist(df)
df
ntile(df,n=4)
