---
title: "tidyverse"
author: "Ronald Mego"
date: "11/20/2021"
output: pdf_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r, echo=FALSE}}
library(tidyverse)
library(nycflights13)
```

```{r}
?flights
nycflights13::flights
data(flights)
#View(flights)
```

#funciones:
filter() -> filtrar observaciones a partir de valores concretos
arrange -> reordenar las filas
select() -> seleccionar variables por sus nombres
mutate() -> crea nuevas variables con funciones a partir de las existentes
summarise() -> colapsar varios valores para dar un resumen de los mismos

group_by() -> opera la función a la que acompaña grupo a grupo

orden de usar las funciones:
1 - dataframe
2 - operaciones que queremos hacer a las variables del dataframe
3 - resultado en un nuevo dataframe

###FILTER: devuelve un dataframe
```{r}
jan1 <- filter ( flights , month == 1 , day == 1 ) #vuelos del 1/1
may19 <-  filter (flights , month == 5 , day == 19 ) #vuelos del 19/5
dec25 <- filter (flights, month == 12 , day == 25 ) #vuelos el 25/12
```


```{r}
filter (flights , month == 5 | month == 6 ) #filtra donde el mes es mayo o junio
filter( flights , month %in% c ( 5 , 6) ) #filtra donde el mes es mayo o junio

filter (flights , arr_delay <= 60 , dep_delay <= 60) #filtra los vuelos cuyo delay de llegada sea maximo de una hora
filter (flights , !(arr_delay>60 | dep_delay>60)) #filtra los vuelos cuyo delay de llegada sea maximo de una hora.usando la ley de morgan
```

```{r}
age.mery<-NA
is.na(age.mery) #como identificar los NA
```

```{r}
df <- tibble (x = c (1,2,NA,4,5)) #data demo con NA
filter(df,is.na(x)|x>2) #subconjunto que incluye el NA
```
```{r}
head(flights) # 6 primeras filas
tail(flights) # 6 ultimas filas
```

#ARRANGE (de menor a mayor)
se visualiza que los datos de "flights" no estan ordenados, entonces los reordenamos:
```{r}
sorted_date <- arrange(flights , year,month,day)
tail(sorted_date)
```

#ARRANGE (de mayor a menor)
```{r}
arrange(flights , desc(arr_delay)) %>% head(.) #el que tuvo mas retraso de partida
arrange(flights, desc(dep_delay)) %>% head(.) #el que tuvo mas retraso de llegada
```

¿Cómo se ordenan los NA? Siempre se van al final
```{r}
arrange(df,x)  #NA se va al final
arrange(df,desc(x)) #NA se va al final
```
```{r}
#el vuelo que mas recorrio
arrange(flights , desc(distance)) %>% head(.) 
```

```{r}
#Encuentra todos los vuelos que llegaron más de una hora tarde de lo previsto.
filter(flights , arr_delay>60) 
```
```{r}
#Encuentra todos los vuelos que volaron hacia San Francisco (aeropuertos SFO y OAK)
filter(flights , dest %in% c("SFO","OAK") ) s
```
```{r}
#Encuentra todos los vuelos operados por United American (UA) o por American Airlines (AA)
filter(flights , carrier %in% c("UA","AA")) 
```

```{r}
#Encuentra todos los vuelos que salieron los meses de primavera (Abril, Mayo y Junio)
filter(flights , month %in% c(4,5,6)) 
```

```{r}
#Encuentra todos los vuelos que llegaron más de una hora tarde pero salieron con menos de una hora de retraso.
filter(flights , dep_delay<60 & arr_delay>60) 
```
```{r}
#Encuentra todos los vuelos que llegaron más de una hora tarde pero salieron con menos de una hora de retraso.
filter ( flights , arr_delay > 60 & dep_delay < 60 ) 
```

```{r}
#Encuentra todos los vuelos que salieron con más de una hora de retraso pero consiguieron llegar con menos de 30 minutos de retraso (el avión aceleró en el aire)
filter ( flights , dep_delay > 60 & arr_delay < 30)
```

```{r}
#Encuentra todos los vuelos que salen entre medianoche y las 7 de la mañana (vuelos nocturnos).
filter ( flights , dep_time > 0000 & dep_time<0700) 
```
```{r}
#Investiga el uso de la función between() de dplyr. ¿Qué hace? Puedes usarlo para resolver la sintaxis necesaria para responder alguna de las preguntas anteriores?

filter ( flights , between( dep_time , 0000 , 0700) ) 
```
```{r}
#¿Cuantos vuelos tienen un valor desconocido de dep_time?
filter( flights , is.na(dep_time))
```
```{r}
#¿Qué variables del dataset contienen valores desconocidos? ¿Qué representan esas filas donde faltan los datos?

colnames(flights)[colSums(is.na(flights)) > 0]
```
```{r}
NA^0
NA|TRUE
FALSE&NA
```
#SELECT

se visualiza que los datos de "flights" no estan ordenados, entonces los reordenamos:
```{r}
sorted_date <- arrange(flights , year,month,day)
```

#como hacer slice de filas
```{r}
sorted_date[1,] #la primera fila
sorted_date[1024:1068,] #las filas desde la posicion 1024 hasta la posicion 1068
```

```{r}
#mostrar solo año, mes y día
select(flights, year, month, day)
```


```{r}
#mostrar solo retraso en tiempo de salida y llegada entre las filas 1024 y la 1068
select ( sorted_date [1024:1068,] , dep_delay, arr_delay)
```

mostrar todas las columnas entre dep_delay y arr_delay
```{r}
select(flights, dep_delay:arr_delay)
```

mostrar todas las columnas excepto las que estan entre año y día
```{r}
select ( flights , -(year:day))
```
mostrar todas las columnas que empiezan por "dep":
```{r}
select ( flights , starts_with("dep"))
```

mostrar todas las columnas que acaban con "delay":
```{r}
select ( flights , ends_with("delay"))
```

mostrar todas las columnas que contengan las letras "st"
```{r}
select ( flights , contains ("st"))
```
seleccionar columnas con expresiones regulares
```{r}
#buscar caracteres repetidos
select( flights , matches ("(.)\\1"))

```
seleccionar columnas que sean x1, x2, x3, x4, x5
```{r}
select ( flights , num_range("x",1:5))
```

seleccionar tres columnas de interes y dejar todas las demas al final con everything:
```{r}
select (flights , time_hour , distance, air_time, everything())
```

```{r}
#¿Qué variables del dataset contienen valores desconocidos? ¿Qué representan esas filas donde faltan los datos?

colnames(flights)[colSums(is.na(flights)) > 0]
```

Piensa cómo podrías usar la función arrange() para colocar todos los valores NA al inicio. Pista: puedes la función is.na() en lugar de la función desc() como argumento de arrange.
```{r}
arrange(flights,!is.na(dep_time)) 

arrange(flights,desc(is.na(dep_delay))) #otra forma
```

Ordena los vuelos de flights para encontrar los vuelos más retrasados en la salida. ¿Qué vuelos fueron los que salieron los primeros antes de lo previsto?
```{r}
arrange(filter(flights,!is.na(dep_delay)),desc(dep_delay))
```
Ordena los vuelos de flights para encontrar los vuelos más retrasados en la salida. ¿Qué vuelos fueron los que salieron los primeros antes de lo previsto?
```{r}
arrange( flights , desc(dep_delay))
```

Ordena los vuelos de flights para encontrar los vuelos más rápidos. Usa el concepto de rapidez que consideres. 
```{r}
arrange(flights, desc (distance/air_time) )
```
¿Qué vuelos tienen los trayectos más largos? Busca en Wikipedia qué dos aeropuertos del dataset alojan los vuelos más largos.
```{r}
arrange(flights , desc(air_time))
```
¿Qué vuelos tienen los trayectos más cortos? Busca en Wikipedia qué dos aeropuertos del dataset alojan los vuelos más largos. 
```{r}
arrange(flights , (air_time))
```
Dale al coco para pensar cuantas más maneras posibles de seleccionar los campos dep_time, dep_delay, arr_time y arr_delay del dataset de flights
```{r}
select(flights, dep_time:arr_delay & -sched_dep_time & -sched_arr_time)
```

Investiga cómo puede ser útil la función one_of() de la pregunta anterior en conjunción con el vector de variables 
#selecciono todas las columnas excepto las que estan en el vector
```{r}
select(flights,-one_of(c("year", "month", "day", "dep_delay", "arr_delay")))
```
```{r}
select(flights, contains("time"))
```
###MUTATE
```{r}
#flights_new <- select ( flights , year:day,ends_with("delay"),distance,air_time)
```

#si requieres añadir nuevas variables al dataframe original
```{r}
mutate(flights_new ,
       time_gain = arr_delay - dep_delay,
       air_time_hour= air_time/60,
       flight_speed = distance/air_time_hour,
       time_gain_per_hour = time_gain / air_time_hour
       ) -> flights_new
```
###TRANSMUTE
#si requieres obtener nuevas variables al dataframe original y descartar las antiguas
```{r}
transmute(flights_new ,
       time_gain = arr_delay - dep_delay,
       air_time_hour= air_time/60,
       flight_speed = distance/air_time_hour,
       time_gain_per_hour = time_gain / air_time_hour
       ) -> data_from_flights
```


#Operaciones aritméticas en mutate: +,-,*,/,^
#Agregados de funciones, ejemplos: x/sum(x) | x-mean(x) | (x-mean(x))/sd(x) | (x-min(x))/(max(x)-min(x))
#Aritmetica modular: %/% -> cociente de la division entera, && -> resto de la division entera
#ejemplo: x==y*(x%/%y) + (x%%y)s 
```{r}
transmute(flights,
          air_time,
          hour_air = air_time%/% 60,
          minute_air= air_time %%60
          )
```
#logaritmos: log() -> logarimto en base e, log2(), log10()
#offsetgs: lead(), 
# lag() -> mueve hacia la derecha
# lead() -> mueve hacia la izquierda
```{r}
df <- 1:12
df
lag(df)
lead(df)
```

#Funciones acumulativas: cumsum(), cumprod(), cummin(), cummax(), cummean()
```{r}
df
cumsum(df)
cumprod(df)
cummin(df)
cummax(df)
cummean(df)
```
#comparaciones logicas: >,>=,<,<=,==,!=
```{r}
transmute(flights,
          dep_delay,
          has_been_delayed=(dep_delay>0)
          )
```

#Rankings: min_rank() , esta funcion podria tener empates
```{r}
df <- c(7,1,2,5,3,3,NA,3,4,-2)
df
min_rank(df) #de menor a mayor
min_rank(desc(df)) #de mayor a menor
```

#Rankings: row_number() , esta funcion no tiene empates
```{r}
df
row_number(df)
```

```{r}
df
dense_rank(df)
```
#porcentaje relativo sore el mas grande
```{r}
df
percent_rank(df)
```

#porcentaje acumulado
```{r}
df
cume_dist(df)
```
#quantiles: indica a que quantil pertenece cada dato
```{r}
df
ntile(df,n=4)
```

El dataset de vuelos tiene dos variables, dep_time y sched_dep_time muy útiles pero difíciles de usar por cómo vienen dadas al no ser variables contínuas. Fíjate que cuando pone 559, se refiere a que el vuelo salió a las 5:59... 

Convierte este dato en otro más útil que represente el número de minutos que horas desde media noche. 

```{r}
transmute(flights,dep_time,ht=dep_time%/%100,mt=dep_time%%100,m=ht*60+mt)
transmute(flights,sched_dep_time,ht=sched_dep_time%/%100,mt=sched_dep_time%%100,m=ht*60+mt)
```

Compara las variables air_time contra arr_time - dep_time. 

¿Qué esperas ver?
¿Qué ves realmente?
¿Se te ocurre algo para mejorarlo y corregirlo?

```{r}
transmute( flights , air_time,
           arr_time,
           ath=arr_time%/%100, atm=arr_time%%100,at=ath*60+atm, 
           dep_time,
           dth=dep_time%/%100,dtm=dep_time%%100,dt=dth*60+dtm,
           at-dt)
```

```{r}
transmute(flights, 
          dt=dep_time%/%100*60+dep_time%%100,
          st=sched_dep_time%/%100*60+sched_dep_time%%100,
          dep_delay,
          d=dt-st
          )
```


```{r}
arrange(transmute(flights,dep_delay,ranking=min_rank(desc(dep_delay))),ranking)[1:10,]

```


```{r}
1:6 + 1:20
```

```{r}
transmute(flights, sin(dep_delay))
```


###SUMMARISE
```{r}
summarise(flights,delay=mean(dep_delay, na.rm=T))
```
#SUMMARISE / GROUP BY
```{r}
by_month_group <- group_by(flights,year,month)
summarise(by_month_group,delay=mean(dep_delay,na.rm=T))
```

```{r}
by_day_group <- group_by(flights, year, month, day)
summarise(by_day_group,
          delay=mean(dep_delay,na.rm=T),
          median=median(dep_delay,na.rm=T),
          min=min(dep_delay,na.rm=T)
          )
```

```{r}
summarise(group_by(flights,carrier),
          delay=mean(dep_delay,na.rm=T))
```

```{r}
mutate(summarise(group_by(flights,carrier),
          delay=mean(dep_delay,na.rm=T)),
          sorted=min_rank(delay))
```
```{r}
mutate(summarise(group_by(flights,carrier),median=median(dep_delay,na.rm=T)),min_rank(median))
```

### PIPES
analizando aeropuertos con mas de 100 vuelos excepto el de HNL
```{r}
group_by_dest <- group_by(flights, dest)
delay <-  summarise(group_by_dest,
                      count=n(),
                      dist=mean(distance,na.rm=T),
                      delay=mean(arr_delay,na.rm=T))
delay <- filter(delay, count>100,dest != "HNL")
```


```{r}
ggplot(data=delay,mapping = aes(x=dist,y = delay))+
  geom_point(aes(size=count),alpha=0.2)+
  geom_smooth(se=F)+
  geom_text(aes(label=dest,alpha=0.3))
```
```{r}
delays <- flights %>%
  group_by(dest) %>%
  summarise(count=n(),
            dist=mean(distance,na.rm=T),
            delay=mean(arr_delay,na.rm=T)
            ) %>%
  filter(count>100,dest!="NL")
```

```{r}
flights %>% group_by(year,month,day) %>%
  summarise(mean=mean(arr_delay,na.rm=T),
            median=median(arr_delay,na.rm=T),
            count=n())
```

#vuelos no cancelados
```{r}
flights %>%
  filter(!is.na(dep_delay),!is.na(arr_delay)) %>%
  group_by(year,month,day) %>%
  summarise(count=n(),
            mean=mean(dep_delay,na.rm=T),
            sd=sd(dep_delay,na.rm=T))

```

```{r}
flights %>% 
  filter(!is.na(dep_delay),!is.na(arr_delay)) %>%
  group_by(tailnum) %>%
  summarise(delay=mean(dep_delay),
            count=n()) -> delay_numtail
```


```{r}
ggplot(data=delay_numtail, mapping = aes(x=delay))+
  geom_freqpoly(binwidth=5)
```
```{r}
ggplot(data=delay_numtail,mapping = aes(x=delay))+
  geom_histogram(binwidth=5)
```

```{r}
ggplot(data=delay_numtail,mapping = aes(x=count,y=delay))+
  geom_point(alpha=0.2)
```
```{r}
delay_numtail %>%
  filter(count>30) %>%
  ggplot(mapping=aes(x=count,y=delay))+
  geom_point(alpha=0.2)
```

```{r}
#install.packages("Lahman")
batting <- as_tibble(Lahman::Batting)
```

```{r}
batters <- batting %>%
  group_by(playerID) %>%
  summarise(hits=sum(H,na.rm=T),
            bats=sum(AB,na.rm=T),
            bat.average=hits/bats)
```

```{r}
batters %>% filter(bats>100) %>%
  ggplot(mapping = aes(x=bats,y=bat.average))+
  geom_point(alpha=0.2)+
  geom_smooth(se=F)
```


```{r}
batters %>%
  filter(bats>100) %>%
  arrange(desc(bat.average))
```

#* Medidas de Centralización
```{r}
flights %>%
  filter(!is.na(dep_delay),!is.na(arr_delay)) %>%
  group_by(carrier) %>%
  summarise(mean=mean(arr_delay),
            mean2=mean(arr_delay[arr_delay>0]),
            median=median(arr_delay))
  
```
#* Medidas de dispersion
```{r}
flights %>%
  filter(!is.na(dep_delay),!is.na(arr_delay)) %>%
  group_by(carrier) %>%
  summarise(
    sd=sd(arr_delay),
    iqr=IQR(arr_delay),
    mad=mad(arr_delay)
  ) %>%
  arrange(desc(iqr))
#?mad
```
#* Medidas de orden
```{r}
flights %>%
  filter(!is.na(arr_delay),!is.na(dep_delay)) %>%
  group_by(carrier) %>%
  summarise(
    first=min(arr_delay),
    q1=quantile(arr_delay,0.25),
    median=quantile(arr_delay,0.5), #median
    q3=quantile(arr_delay,0.75),
    last=max(arr_delay)
  )
```
#* Medidas de posicion

```{r}
flights %>%
  filter(!is.na(dep_delay),!is.na(arr_delay)) %>%
  group_by(carrier) %>%
  summarise(
    first_dep=first(dep_time),
    second_dep=nth(dep_time,2),
    third_dep=nth(dep_time,3),
    last_dep=last(dep_time)
  )
```

```{r}
flights %>%
  filter(!is.na(dep_delay),!is.na(arr_delay)) %>%
  group_by(carrier) %>%
  mutate(rank=min_rank(dep_time)) %>%
  filter(rank %in% range(rank))
```
#* Funciones de conteo
```{r}
flights %>%
  group_by(dest) %>%
  summarise(
    count=n(),
    carriers=n_distinct(carrier),
    arrivals=sum(!is.na(arr_delay)) #is.na lo convierte a logico y el SUM se terminan convirtiendo en un COUNT de no nulos.
  ) %>%
  arrange(desc(carriers))
```
La funcion COUNT no necesita de summarise para usarse
```{r}
flights %>%
  filter(!is.na(dep_delay),!is.na(arr_delay)) %>%
  count(dest)
```
vista ponderada de un campo
por ejemplo, total de distnacia por cada tailnum, como suma producto
```{r}
flights %>%
  filter(!is.na(dep_delay),!is.na(arr_delay)) %>%
  count(tailnum,wt=distance)
```
#cantidad de vuelos que salen antes de las 5am, sum de valores logicos
```{r}
flights %>%
  filter(!is.na(dep_delay),!is.na(arr_delay)) %>%
  group_by(year,month,day) %>%
  summarise(n_prior_5=sum(dep_time<500))
```

#% vuelos tienen un retraso de mas de una hora? #el mean hace que se calcule una proporcion de la variable condicional
```{r}
flights %>%
  filter(!is.na(dep_delay),!is.na(arr_delay)) %>%
  group_by(carrier) %>%
  summarise(more_than_hour_delay=mean(arr_delay>60)) %>%
  arrange(desc(more_than_hour_delay))
```
#Q vuelos tienen un retraso de mas de una hora?
```{r}
flights %>%
  filter(!is.na(dep_delay),!is.na(arr_delay)) %>%
  group_by(carrier) %>%
  summarise(more_than_hour_delay=sum(arr_delay>60)) %>%
  arrange(desc(more_than_hour_delay))
```
#agrupaciones multiples

```{r}
daily <-  group_by(flights,year,month,day)
(per_day <- summarise(daily,n_fl=n()))
```

```{r}
(per_month <- summarise(per_day,n_fl=sum(n_fl)))
```

```{r}
(per_year <- summarise(per_month,n_fl=sum(n_fl)))
```

#otra forma de hacer agrupacion superior
```{r}
business <-  group_by(flights,carrier,dest,origin)
summarise(business,n_fl=n()) %>%
  summarise(n_fl=sum(n_fl)) %>%
  summarise(n_fl=sum(n_fl))
```
#funcion ungroup
```{r}
daily %>%
  ungroup() %>%
  summarise(n_fl=n())
```

```{r}
business %>% 
  ungroup() %>%
  summarise(n_fl=n())
```

#los 10 peores retrasos de cada dia
```{r}
flights %>%
  group_by(year,month,day) %>%
  filter(rank(desc(arr_delay))<10) -> temp 

temp
```
los 10 destinos mas populares
```{r}
popular_dest <- flights %>%
  group_by(dest) %>%
  filter(n()>365)

popular_dest
```


```{r}
popular_dest %>%
  filter(arr_delay >0) %>%
  mutate(prop_delay = arr_delay / sum (arr_delay)) %>%
  select (year:day,dest,arr_delay,prop_delay)
```

#### VARIACION

##Variables categoricas: factor o vector de caracteres

#representacion grafica: la cuenta de cada factor de la variable cut
```{r}
ggplot(data = diamonds) + 
  geom_bar(mapping = aes(x=cut))
```
#representacion numerica: la cuenta de cada factor de la variable cut
```{r}
diamonds %>%
  count(cut)
```

## variables le continua: 


#representacion numerica
```{r}
diamonds %>%
  count(cut_width(carat,0.5))
```
#representacion grafica
```{r}
ggplot(data=diamonds)+
  geom_histogram(mapping = aes(x=carat),binwidth=0.5)
```

```{r}
diamonds %>%
  filter(carat<3) %>%
  ggplot()+
  geom_histogram(mapping = aes(x=carat),binwidth=0.05)
```
#para representar varios histogramas en un solo grafico es mejor poligono de frecuencas por el overlapping
```{r}
diamonds %>%
  filter(carat<3) %>%
  ggplot(mapping = aes(x=carat,color=cut))+
  geom_freqpoly(binwidth=0.1)
```
#Sobre el peso de los diamantes (carat)
#* Cuales son los valores mas comunes? Por que?
#* Cuales son los valores mas raros
#* Vemos algun patron caracteristico o inusual

#* Que determina que los elementos de un cluster sean similares entre si?
#* Que determina que clusters separados sean diferentes entre si?
#* Describir y explicar cada uno de los clusters
#* Por que alguna observacion puede ser clasificada en el cluster erroneo

#analizando subgrupos
```{r}
#Data de erupciones
data(faithful)
```


```{r}
ggplot(data=faithful,mapping=aes(x=eruptions))+
  geom_histogram(binwidth = 0.2)
```
#outliers
```{r}
ggplot(diamonds)+
  geom_histogram(mapping=aes(x=y),binwidth = 0.5)+
  coord_cartesian(ylim=c(0,100)) #hacemos un zoom al grafico
```
#mirando detalle de los outliers
```{r}
(
  unusual_diamonds <- diamonds %>%
  filter(y<2 | y>30) %>%
  select(price,x,y,x) %>%
  arrange(y)
)
```



#metodo agresivo (no recomendado): borrar todas las filas con inusuales
```{r}
good_diamonds <- diamonds %>%
  filter(between(y,2.4,29.5))
```

#metodo recomendado: reemplazando valores inusuales por NA
```{r}
good_diamonds <- diamonds %>%
  mutate(y=ifelse(y<2 | y>30, #condicion
                  NA, #valor si es verdadero
                  y) #valor si es falso
         ) 
```


```{r}
ggplot(data=good_diamonds,mapping=aes(x=x,y=y))+
  geom_point(na.rm=T)
```
```{r}
data(flights)
```

```{r}
flights %>%
  mutate(
    cancelled=is.na(dep_time),
    sched_hour=sched_dep_time %/%100,
    sched_min=sched_dep_time %%100,
    sched_dep_time = sched_hour+sched_min/60
  ) %>%
  ggplot(mapping=aes(x=sched_dep_time))+
  geom_freqpoly(mapping=aes(color=cancelled),binwidth=0.25)
  
```
```{r}
ggplot(data = diamonds)+
  geom_histogram(mapping = aes(x=x),binwidth=0.5)
```
```{r}
ggplot(data = diamonds)+
  geom_histogram(mapping = aes(x=y),binwidth = 0.5)
```

```{r}
ggplot(data = diamonds)+
  geom_histogram(mapping = aes(x=z),binwidth = 0.5)
```

```{r}
ggplot(data=diamonds)+
  geom_histogram(mapping = aes(x=price),binwidth = 100)
```

```{r}
diamonds %>%
  count(cut_width(carat,0.1)) 
```
```{r}
diamonds %>%
  filter(between(carat,0.99,1)) %>%
  group_by(carat) %>%
  summarise(count=n())
```

```{r}
colnames(flights)[colSums(is.na(flights)) > 0]
```
```{r}
flights %>%
ggplot()+
  geom_histogram(mapping = aes(x=dep_delay),binwidth = 100)+
  coord_cartesian(ylim=c(0,1000))
```

```{r}
df<-tibble(x=c("x","y","x","y","x","x",NA))
ggplot(df)+
  geom_bar(mapping = aes(x=x))
```

```{r}
df <- tibble(a=c(1,2,1,2,2,2,NA))
             ggplot(df)+
               geom_histogram(mapping = aes(x=a))
```

#### COVARIACION

```{r}
ggplot(diamonds)+
  geom_bar(mapping = aes(x=cut))
```
###categoria vs continua
```{r}
ggplot(data=diamonds, mapping = aes(x=price))+
  geom_freqpoly(mapping = aes(color=cut),binwidth=500)
```

#cambiamos por densidades, es decir el area suma 1. esto permite comparar mejor la distribucion
```{r}
ggplot(data=diamonds,mapping=aes(x=price,y=..density..))+
  geom_freqpoly(mapping=aes(color=cut),binwidth=500)
```

```{r}
ggplot(data=diamonds,mapping = aes(x=cut,y=price))+
  geom_boxplot()
```
```{r}
ggplot(data=mpg,mapping=aes(x=class,y=hwy))+
  geom_boxplot()
```
#truco para ordenar de menos a mas
```{r}
ggplot(data=mpg,mapping = aes(x=reorder(class,hwy,FUN=median),y=hwy))+
  geom_boxplot()
```
```{r}
ggplot(data=mpg,mapping = aes(x=reorder(class,hwy,FUN=median),y=hwy))+
  geom_boxplot()+
  coord_flip()
```

```{r}
#categoria vs Categoria
ggplot(data=diamonds)+
  geom_count(mapping=aes(x=cut,y=color))
```
```{r}
diamonds %>%
  count(cut,color)
```
#heatmap
#d3heatmap
#heatmaply
```{r}
diamonds %>%
  count(color,cut) %>%
  ggplot(mapping=aes(x=cut,y=color))+
  geom_tile(mapping=aes(fill=n))
```
###Continua vs Continua

#cuando hay muchos datos, es mejor bajarle la transparencia o usar un hex en vez de geompint
```{r}
ggplot(data = diamonds)+
  geom_point(mapping = aes(x=carat,y=price),alpha=0.01)
```

```{r}
ggplot(data = diamonds)+
  geom_hex(mapping=aes(x=carat,y=price))
```

```{r}
ggplot(data = diamonds)+
  geom_bin2d(mapping=aes(x=carat,y=price))
```
#un scatter plot combinado con boxplots
```{r}
ggplot(data=diamonds,mapping=aes(x=carat,y=price))+
  geom_boxplot(mapping=aes(group=cut_width(carat,0.1)))
```
#un scatter plot combinado con boxplots y con anchura basada en la cantidad de valores

#cut_width, corta los datos en intervalos similares
```{r}
diamonds %>%
  filter(carat<3) %>%
ggplot(mapping=aes(x=carat,y=price))+
  geom_boxplot(mapping=aes(group=cut_width(carat,0.1)),varwidth = T)
```
#cut_number crea X cantidad de grupos
```{r}
diamonds %>%
  filter(carat<3) %>%
  ggplot(mapping=aes(x=carat,y=price))+
  geom_boxplot(mapping = aes(group=cut_number(carat,20)))
```

```{r}
diamonds %>%
  count(cut,clarity) %>%
  ggplot(aes(clarity,cut,fill=n))+
  geom_tile()
```

```{r}
ggplot(data=faithful)+
  geom_point(mapping=aes(x=eruptions,y=waiting))
```

```{r}
diamonds %>%
  ggplot(mapping = aes(x=price,y=carat))+
  geom_hex()+
  geom_smooth()
```


```{r}
diamonds %>%
  ggplot(mapping = aes(x=log(price),y=log(carat)))+
  geom_hex()+
  geom_smooth()
```


```{r}
library(modelr)
mod <- lm(log(price)~log(carat),data=diamonds)

mod
```

```{r}
diamonds_pred <- diamonds %>%
  add_residuals(mod) %>%
  mutate(res=exp(resid))
```

#los residuos
```{r}
ggplot(data=diamonds_pred)+
  geom_point(mapping = aes(x=carat,y=resid))
```
#los residuos estan en torno a cero
```{r}
ggplot(data=diamonds_pred)+
  geom_boxplot(mapping=aes(x=cut,y=resid))
```

Es hora de aplicar todo lo que hemos aprendido para visualizar mejor los tiempos de salida para vuelos cancelados vs los no cancelados. Recuerda bien qué tipo de dato tenemos en cada caso. ¿Qué deduces acerca de los retrasos según la hora del día a la que está programada el vuelo de salida?
```{r}
nycflights13::flights %>%
  mutate(
    cancelled = is.na(dep_time),
    sched_hour = sched_dep_time %/% 100,
    sched_min = sched_dep_time %% 100,
    sched_dep_time = sched_hour + sched_min/60
  ) %>%
  ggplot(mapping = aes(sched_dep_time)) + 
  geom_freqpoly(mapping = aes(y = ..density.., color = cancelled), binwidth = 1/4)
```
#otro boxplot
```{r}
ggplot(data = mpg,
       mapping = 
         aes(x=reorder(class,hwy,FUN=median),
             y=hwy),
              fill=factor(class))+
  geom_boxplot()+
  coord_flip()
```

#otro boxplot
```{r}
library(ggstance)
ggplot(data = mpg,mapping = aes(x = hwy,
                                y = reorder(class, hwy, FUN = median),
                                fill = factor(class)
                                )
       ) + 
  geom_boxploth()
```

Los boxplots nacen en una época donde los datasets eran mucho más pequeños y la palabra big data no era más que un concepto futurista. De ahí que los datos considerados con outliers tuvieran sentido que fueran representados con puntos dado que su existencia era más bien escasa o nula. Para solucionar este problema, existe el letter value plot del paquete lvplot. Instala dicho paquete y usa la geometría geom_lv() para mostrar la distribución de precio vs cut de los diamantes. ¿Qué observas y qué puedes interpretar a raíz de dicho gráfico?

#en boxplot no se aprecia mucho para grandes volumenes de datos
```{r}
ggplot(data = diamonds,
       mapping = aes(x = cut, y = price)
) + geom_boxplot()
```

#esta es una alternativa al boxplot para grandes volumenes de datos
```{r}
#install.packages("lvplot")
#library(lvplot)
ggplot(data = diamonds,
       mapping = aes(x = cut, y = price)
) + geom_lv(aes(fill = ..LV..) )

```
#se le puede mejorar con colores y degradados a esta alternativa al boxplot
```{r}
ggplot(data = diamonds,
       mapping = aes(x = cut, y = price)
) + geom_lv(aes(alpha = ..LV..),fill="blue" )+
  scale_alpha_discrete(range = c(0.7, 0))
```

Compara el uso de la geometría geom_violin() con un facet de geom_histogram() y contra un geom_freqpoly() coloreado. Investiga cuales son los pros y los contras de cada uno de los tipos de representación.

Compara los gráficos
```{r}
ggplot(diamonds, mapping = aes(x = cut, y = price)) + 
  geom_violin()
```


```{r}
ggplot(diamonds) + 
  geom_histogram(mapping = aes(x = price), binwidth = 100)+ 
  facet_wrap(~cut, nrow = 3)
```


```{r}
ggplot(diamonds) + 
  geom_freqpoly(mapping = aes(x = price, color = cut), binwidth = 100)
```
```{r}
ggplot(diamonds) + 
  geom_freqpoly(mapping = aes(x = price,y=..density.., color = cut), binwidth = 100)
```
Si tenemos datasets pequeños, a veces es útil usar la opción que ya conocemos de geom_jitter() para ver la relación entre una variable contínua y una variable categórica. El paquete de R ggbeeswarm tiene un par de métodos similares a geom_jitter() que te pueden ayudar a tal efecto. Listalos y haz un gráfico con cada uno de ellos para ver qué descripción de los datos podemos extraer de cada uno. ¿A qué gráfico de los que ya has visto durante esta práctica se parece?
```{r}
#install.packages("ggbeeswarm")
#library(ggbeeswarm)
ggplot(diamonds,aes(cut, price)) + 
  geom_quasirandom()
```
```{r}
diamonds %>%
  count(color, cut) %>%
  ggplot(mapping = aes(x = cut, y = color)) + 
  geom_tile(mapping = aes(fill = n))
```
```{r}
diamonds %>%
  count(color, cut) %>%
  ggplot(mapping = aes(x = color, y = cut)) + 
  geom_tile(mapping = aes(fill = log(n)))
```
Utiliza la geom_tile() junto con dplyr para explorar si el promedio del retraso de los vuelos varía con respecto al destino y mes del año. 
¿Qué hace que este gráfico sea dificil de leer o de interpretar?
¿Cómo puedes mejorar la visualización?

```{r}
nycflights13::flights %>%
  count(month, dest) %>%
  filter(n>400) %>%
  ggplot(mapping = aes(x = dest, y = month)) + 
  geom_tile(mapping = aes(fill = n))
```
En lugar de hacer un resumen de la distribución condicional de dos variables numéricas con un boxplot, se puede usar un polígono de frecuencias. 
¿Qué hay que tener en cuenta cuando usas cut_width() o cuando usas cut_number()?
¿Cómo influye este hecho en la visualización 2D de carat y price
Da la mejor visualización posible de carat dividido por price.
```{r}
ggplot(diamonds, aes(price, colour = cut_width(carat, 1.0))) +
  geom_freqpoly()
```
```{r}
ggplot(diamonds, aes(price, colour = cut_number(carat, 5))) +
  geom_freqpoly()
```
```{r}
ggplot(diamonds, aes(carat, colour = cut_width(price, 5000))) +
  geom_freqpoly()
```

Compara la distribución del precio de los diamantes grandes vs diamantes pequeños. Elige el concepto de grande y pequeño que consideres. Comenta el resultado
```{r}
diamonds %>% 
filter(between(x,2,20)) %>%
  filter(between(y,2,20)) %>%
  filter(between(z,2,20)) %>%
  ggplot(aes(price, x*y*z)) + 
   geom_bin2d()
```

Combina diferentes técnicas de ggplot para visulaizar la distribución combinada de cut, carat y precio.
```{r}
diamonds %>%
  ggplot(aes(price, colour = cut)) + 
  geom_freqpoly() + 
  facet_wrap(~cut_number(carat, 5), nrow = 2)
```

Los plots en 2D pueden revelar outliers que no se ven en plots de una sola dimensión. Por ejemplo, algunos puntos del plot dado por
```{r}
ggplot(data = diamonds) + 

   geom_point(mapping = aes(x = x, y = y)) + 

   coord_cartesian(xlim = c(4,12), ylim = c(4,12))
```


```{r}
faithful %>%
  filter(eruptions >3 ) %>%
  ggplot(aes(eruptions))+
  geom_freqpoly(binwidth=0.2)
```

```{r}
diamonds %>%
  count(cut,clarity) %>%
  ggplot(aes(clarity,cut,fill=n))+
  geom_tile()
```


