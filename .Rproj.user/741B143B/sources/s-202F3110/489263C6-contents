---
title: "Data Wrangling con Tidyverse"
author: "Ronald Mego"
date: "11/25/2021"
output: pdf_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```


```{r}
#vignette("tibble")
library(tidyverse)
```

```{r}
class(iris)
```

```{r}
iris_tibble <- as_tibble(iris)
class(iris_tibble)
```

```{r}
t <- tibble(
  x=1:10,
  y=pi,
  z=y*x^2
)
```

```{r}
t[2,3]
```


```{r}
t2 <-  tibble (
  `:)`="smilie",
  ` `="space",
  `1998`="number"
)
```


```{r}
tribble(
  ~x,~y,~z,
#|---|---|----|
  "a", 4, 3.14,
  "b", 8, 6.28,
  "c", 9, -1.25
)
```

```{r}
#library(lubridate) #parquete para fechas
tibble(
  a=lubridate::now()+runif(1e3)*24*60*60,
  b=1:1e3,
  c=lubridate::today()+runif(1e3)*30,
  d=runif(1e3),
  e=sample(letters,1e3,replace=T)
)
```
#con una tibble, podemos ajustar el metodo print para visualizar mejor los datasets
```{r}
nycflights13::flights %>%
  print(n=12,width=Inf) #ancho infinito
```


```{r}
(
df <-  tibble(
  x=rnorm(10),
  y=runif(10)
)
)
```

```{r}
df$x
```

```{r}
df[["x"]]
```

```{r}
df[[1]]
```

```{r}
df <- data.frame(abc = 1, xyz = "a")
df$x
#df[,"xyz"]
#df[,c("abc","xyz")]
```

```{r}
df <- tibble(

  `1` = 1:12,
  `2` = `1` * 2 + `1`*runif(length(`1`))
)
```


```{r}
df <- tibble(
  `1` = 1:12,
  `2` = `1` * 2 + `1`*runif(length(`1`))
)
```

#renombrar columnas
```{r}
df %>%
  rename(x = `1`, 
         y = `2`)
```
#formas de leer csv
#* read_csv() ','
#* read_csv2() ':'
#* read_tsv '\t'
#* read_delim(delim = '\n') "este ejemplo es de un 'enter'"

#* read_fwf() por anchura
 #* fwf_widths()
 #* fwf_position()
 
La mas importante:
#* read_table() consolida todos los anteriores
#* read_log() lee logs de apache y otros

#install.packages('webreadr') otra libreria para casos espciales


```{r}
getwd()  #reconozco el nivel en el que estoy
write.csv(mtcars,file="../data/cars.csv") #retrocedo un nivel y grabo en data
```

ahora a leer csv
```{r}
cars <- read_csv("../data/cars.csv")
```
```{r}
read_csv("x,y,z
         1,2,3.5
         4,5,6
         7,8,9")
```

#para omitir algunas filas que no son datos
```{r}
read_csv("este fichero fue generado por Ronald Mego
         el día 27 de noviembre del 2021 para
         usarlo en el curso de tidyverse
         x,y,z
         1,2,3
         4,5,6", skip=3)
```
#para identificar los comentarios y omitirlos de los datos
```{r}
read_csv("#esto es un comentario
         x,y,z
         1,2,3
         4,5,6",comment="#")
```

#cuando no hay cabeceras y lo dejas por defecto
```{r}
read_csv("1,2,3\n4,5,6\n7,8,9",col_names=F)
```
#cuando no hay cabeceras y le asignas nombres
```{r}
read_csv("1,2,3\n4,5,6\n7,8,9",col_names=c("primera","segunda","tercera"))
```
#identificar NA asi hayan sido guardado como vacios, o por simbolos especiales como "#" p "."
```{r}
read_csv("x,y,z\n1,2,.\n4,#,6",na=c(".","#"))
```

```{r}
data <- "x,y\n1,'a,b'"
read_delim(data, ",", quote = "'")
```

# pase_*

#lee valores logicos en vez de texto
```{r}
str(parse_logical(c("TRUE","FALSE","FALSE","NA")))
```
#lee valores enteros
```{r}
str(parse_integer(c("1","2","3","4")))
```
#lee fechas
```{r}
str(parse_date(c("1988-05-19","2018-05-30")))
```
#indicandole NAs a parse
```{r}
parse_integer(c("1","2","3","#","5","729"),na="#")
```

```{r}
parse_integer(c("1","2","hola","5","234","3.141592"))
```
#tipos de pase

#parse_logical()
#parse_integer()
#parse_double()
#parse_number()
  #decimales -> . ,
  #monetarios 100€, $1000
  #porcentajes 12%
  #agrupamiento números grandes 1,000,000
#parse_character() por si un texto viniera mal codificado
#parse_factor()
#parse_datetime()
#parse_date()
#parse_time()

#casos de distintos tipos de decimales
```{r}
parse_double("12.1345")
parse_double("12,1345",locale=locale(decimal_mark = ",")) #para corregir la cola decimal
```
#casos de distintos tipos de moneda y simbolos como el porcentaje
```{r}
parse_number("100€")
parse_number("$1000")
parse_number("12%")
parse_number("el vestido ha costado 12.45€")
```

#casos de numeros grandes, agrupaciones
```{r}
parse_number("$1,233,478")
parse_number("1.546.254",locale=locale(grouping_mark = "."))
parse_number("123'456'789",locale=locale(grouping_mark = "'"))
```

#CARACTERES

#pasa cada caracter a bytes
```{r}
charToRaw("Ronald Mego")
```
#formatos de encoding

#Latin1 (ISO-8859-1) para idiomas de Europa del Oeste
#Latin2 (ISO-8859-2) para idiomas de Europa del Oeste
#UTF-8 entiende casi todo, excepto para data generada por plataformas antiguas
```{r}
x1 <- "El Ni\xf1o ha estado enfermo" #Latin
x2 <- "\x82\xb1\x82\xf1\x82\xb2\x82\xcd" #chino
```

```{r}
parse_character(x1,locale =locale(encoding = "Latin1"))
parse_character(x2,locale=locale(encoding = "Shift-JIS"))
```
#si en caso no conoces el encoding de tus datos, esta funcion lo predice
```{r}
guess_encoding(charToRaw(x1))
```

```{r}
parse_character(x1,locale =locale(encoding = "ISO-8859-1"))
```

#factores
```{r}
months <- c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec")
parse_factor(c("May","Apr","Jul","Aug","Sec","Nob"),levels = months)
#parse_factor
```
#Procesando fechas y horas

#EPOCH -> 1970-01-01 00:00

#parse_datetime() ISO-8601

#ejemplo 27 de noviembre las 10:51am
```{r}
parse_datetime("2021-11-27T1051")
```

```{r}
parse_datetime("20180605")
```

```{r}
parse_date("2015-12-07")
```

```{r}
parse_date("2017/05/18")
```
#trabajando con horas
```{r}
parse_time("03:00 pm")
```

```{r}
parse_time("20:00:34")
```
# Años
# %Y -> año con 4 dígitos
# %y -> año con 2 dígiyos

# Meses
# %m -> mes en formato de dos g=gitos 01-12
# %b -> abreviación del mes 'Ene', 'Feb', ...
# %B -> nombre completo del mes 'Enero','Febrero', ...

# Día
# %d -> número del día con dos dígitos 01-31
# %e -> de forma opcional, los dígitos 1-9 pueden llevar espacio en blanco

# Horas
# %H -> hora entre 0-23
# %I -> hora entre 0-12 siempre va con %p
# %p -> am/pm
# %M -> minutos 0-59
# %s -> segundos enteros 0-59
# %Os -> segundos reales
# %Z -> Zona horario America/Chicago, Canada , France, Spain
# %z -> Zona horaria con respecto a UTC +0800, +0100

# No dígitos
#%. -> eliminar un carácter no dígito
#$* -> eliminar cualquier número de caracteres que no sean dígitos

Cuando es un formato especial se especifica FORMAT segun las reglas descritas, ejemplo:
```{r}
parse_date("05/08/15",format="%d/%m/%y")
```

```{r}
parse_date("08/05/15",format="%m/%d/%y")
```

```{r}
parse_date("01-05-2018",format="%d-%m-%Y")
```
```{r}
parse_date("01 Jan 2018",format = "")
```


```{r}
parse_date("03 March 17", format = "%d %B %y")
```

```{r}
parse_date("5 janvier 2012", format="%d %B %Y",locale=locale("fr"))
```
```{r}
parse_date("2 septiembre 1985",format="%d %B %Y",locale=locale("es"))
```
```{r}
guess_parser("2018-05-03")
```

```{r}
guess_parser("18:59")
```

```{r}
guess_parser(c("3,6,7,8,23"))
```

```{r}
guess_parser(c("TRUE","TRUE","FALSE"))
```

```{r}
guess_parser(c("3","6","8","25"))
```
```{r}
challenge <- read_csv(readr_example("challenge.csv"))
```

```{r}
problems(challenge)
```
#especificando el tipo de dato de cada columna cargadda
```{r}
challenge <- read_csv(readr_example("challenge.csv"),
                      col_types = cols(
                        x=col_double(),
                        y=col_date()
                      ))
```

#lo mas seguro es hacer que todas sean caracter
```{r}
challenge2 <- read_csv(readr_example("challenge.csv"),
                       col_types = cols(.default = col_character()))
```

#luego de cambiar todo como texto, la funcion type_convert puede inferir el formato correcto de las columnas
```{r}
type_convert(challenge2) 
```
#casos extremos

#leer cada linea como string con read_lines()
```{r}
read_lines(readr_example("challenge.csv"))
```

#leer todo el archivo en un unico string con read_file()
```{r}
read_file(readr_example("challenge.csv"))
```

#escritura de ficheros

# write_csv(), write_tsv()
# strings en UTF8
# date /datetimes ISO8601
# write_excel_csv()

#cuando se graba datos en csv se pierde el tipo de datos
```{r}
write_csv(challenge,path = "../data/challenge.csv")
```

#dado que el csv pierde el tipo de datos, se tiene otra opcion
# se usa rds
```{r}
write_rds(challenge,file = "../data/challenge.rds")
```

#cuando lo lees, reconoce el tipo de formato.
```{r}
read_rds("../data/challenge.rds")
```
#otra opcion mas ligera es el formato feather para grabar y leer archivos
```{r}
library(feather)
write_feather(challenge,path="../data/challenge.feather")
```

```{r}
read_feather("../data/challenge.feather")
```
#otras librerias para leer de otros programas
#haven -> SPSS, Stata, SAS
#readxl -> ..xml, .xmls
#DBI -> RMySQL, RSQLite, RPostgreSQL

# jsonlite
# xml2
```{r}

```

